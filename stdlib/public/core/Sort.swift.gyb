//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2016 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%{
def cmp(a, b, p):
  if p:
    return "isOrderedBefore(" + a + ", " + b + ")"
  else:
    return "(" + a + " < " + b + ")"

}%

// Generate two versions of sorting functions: one with an explicitly passed
// predicate 'isOrderedBefore' and the other for Comparable types that don't
// need such a predicate.
% preds = [True, False]
% for p in preds:
%{
if p:
  orderingRequirement = """\
/// - Precondition: `isOrderedBefore` is a
///   [strict weak ordering](http://en.wikipedia.org/wiki/Strict_weak_order#Strict_weak_orderings)
///   over `elements`."""
  according = " according to `isOrderedBefore`"
else:
  orderingRequirement = """\
/// - Precondition: The less-than operator (`func <`) defined in the `Comparable`
///   conformance is a [strict weak ordering](http://en.wikipedia.org/wiki/Strict_weak_order#Strict_weak_orderings)
///   over `elements`."""
  according = ""
}%

func _insertionSort<
  C: MutableCollection where C.Index: BidirectionalIndex
  ${"" if p else ", C.Iterator.Element : Comparable"}
>(
  elements: inout C,
  subRange range: Range<C.Index> ${"," if p else ""}
  ${"isOrderedBefore: inout (C.Iterator.Element, C.Iterator.Element) -> Bool" if p else ""}
) {
  if !range.isEmpty {
    let start = range.startIndex

    // Keep track of the end of the initial sequence of sorted
    // elements.
    var sortedEnd = start

    // One element is trivially already-sorted, thus pre-increment
    // Continue until the sorted elements cover the whole sequence
    sortedEnd._successorInPlace()
    while sortedEnd != range.endIndex {
      // get the first unsorted element
      let x: C.Iterator.Element = elements[sortedEnd]

      // Look backwards for x's position in the sorted sequence,
      // moving elements forward to make room.
      var i = sortedEnd
      repeat {
        let predecessor: C.Iterator.Element = elements[i.predecessor()]

        // if x doesn't belong before y, we've found its position
        if !${cmp("x", "predecessor", p)} {
          break
        }

        // Move y forward
        elements[i] = predecessor
        i._predecessorInPlace()
      } while i != start

      if i != sortedEnd {
        // Plop x into position
        elements[i] = x
      }
      sortedEnd._successorInPlace()
    }
  }
}

func _partition<
  C: MutableCollection where C.Index: RandomAccessIndex
  ${"" if p else ", C.Iterator.Element : Comparable"}
>(
  elements: inout C,
  subRange range: Range<C.Index> ${"," if p else ""}
  ${"isOrderedBefore: inout (C.Iterator.Element, C.Iterator.Element) -> Bool" if p else ""}
) -> C.Index {
  var lo = range.startIndex
  var hi = range.endIndex

  if lo == hi {
    return lo
  }

  // The first element is the pivot.
  let pivot = elements[range.startIndex]

  // Loop invariants:
  // * lo < hi
  // * elements[i] < pivot, for i in range.startIndex+1..lo
  // * pivot <= elements[i] for i in hi..range.endIndex

Loop: while true {
  FindLo: repeat {
      lo._successorInPlace()
      while lo != hi {
        if !${cmp("elements[lo]", "pivot", p)} { break FindLo }
        lo._successorInPlace()
      }
      break Loop
    } while false

  FindHi: repeat {
      hi._predecessorInPlace()
      while hi != lo {
        if ${cmp("elements[hi]", "pivot", p)} { break FindHi }
        hi._predecessorInPlace()
      }
      break Loop
    } while false

    swap(&elements[lo], &elements[hi])
  }

  lo._predecessorInPlace()
  if lo != range.startIndex {
    // swap the pivot into place
    swap(&elements[lo], &elements[range.startIndex])
  }

  return lo
}

public // @testable
func _introSort<
  C : MutableCollection where C.Index : RandomAccessIndex
  ${"" if p else ", C.Iterator.Element : Comparable"}
>(
  elements: inout C,
  subRange range: Range<C.Index> ${"," if p else ""}
  ${"isOrderedBefore: (C.Iterator.Element, C.Iterator.Element) -> Bool" if p else ""}
) {
%   if p:
  var isOrderedBeforeVar = isOrderedBefore
%   end
  let len = range.count.toIntMax()
  if len < 2 {
    return
  }
  // Set max recursion depth to 2*floor(log(N)), as suggested in the introsort
  // paper: http://www.cs.rpi.edu/~musser/gp/introsort.ps
  let depthLimit = 2 * _floorLog2(Int64(len))
  _introSortImpl(
    &elements,
    subRange: range,
    ${"isOrderedBefore: &isOrderedBeforeVar," if p else ""}
    depthLimit: depthLimit)
}

func _introSortImpl<
  C : MutableCollection where C.Index : RandomAccessIndex
  ${"" if p else ", C.Iterator.Element : Comparable"}
>(
  elements: inout C,
  subRange range: Range<C.Index> ${"," if p else ""}
  ${"isOrderedBefore: inout (C.Iterator.Element, C.Iterator.Element) -> Bool" if p else ""},
  depthLimit: Int
) {

  // Insertion sort is better at handling smaller regions.
  if range.count < 20 {
    _insertionSort(
      &elements,
      subRange: range
      ${", isOrderedBefore: &isOrderedBefore" if p else ""})
    return
  }
  if depthLimit == 0 {
    _heapSort(
      &elements,
      subRange: range
      ${", isOrderedBefore: &isOrderedBefore" if p else ""})
    return
  }

  // Partition and sort.
  // We don't check the depthLimit variable for underflow because this variable
  // is always greater than zero (see check above).
  let partIdx: C.Index = _partition(
    &elements,
    subRange: range
    ${", isOrderedBefore: &isOrderedBefore" if p else ""})
  _introSortImpl(
    &elements,
    subRange: range.startIndex..<partIdx,
    ${"isOrderedBefore: &isOrderedBefore, " if p else ""}
    depthLimit: depthLimit &- 1)
  _introSortImpl(
    &elements,
    subRange: (partIdx.successor())..<range.endIndex,
    ${"isOrderedBefore: &isOrderedBefore, " if p else ""}
    depthLimit: depthLimit &- 1)
}

func _siftDown<
  C : MutableCollection where C.Index : RandomAccessIndex
  ${"" if p else ", C.Iterator.Element : Comparable"}
>(
  elements: inout C,
  index: C.Index,
  subRange range: Range<C.Index> ${"," if p else ""}
  ${"isOrderedBefore: inout (C.Iterator.Element, C.Iterator.Element) -> Bool" if p else ""}
) {
  let countToIndex = (range.startIndex..<index).count
  let countFromIndex = (index..<range.endIndex).count
  // Check if left child is within bounds. If not, return, because there are
  // no children of the given node in the heap.
  if countToIndex + 1 >= countFromIndex {
    return
  }
  let left = index.advanced(by: countToIndex + 1)
  var largest = index
  if ${cmp("elements[largest]", "elements[left]", p)} {
    largest = left
  }
  // Check if right child is also within bounds before trying to examine it.
  if countToIndex + 2 < countFromIndex {
    let right = left + 1
    if ${cmp("elements[largest]", "elements[right]", p)} {
      largest = right
    }
  }
  // If a child is bigger than the current node, swap them and continue sifting
  // down.
  if largest != index {
    swap(&elements[index], &elements[largest])
    _siftDown(
      &elements,
      index: largest,
      subRange: range
      ${", isOrderedBefore: &isOrderedBefore" if p else ""})
  }
}
func _heapify<
  C : MutableCollection where C.Index : RandomAccessIndex
  ${"" if p else ", C.Iterator.Element : Comparable"}
>(
  elements: inout C,
  subRange range: Range<C.Index> ${"," if p else ""}
  ${"isOrderedBefore: inout (C.Iterator.Element, C.Iterator.Element) -> Bool" if p else ""}
) {
  // Here we build a heap starting from the lowest nodes and moving to the root.
  // On every step we sift down the current node to obey the max-heap property:
  //   parent >= max(leftChild, rightChild)
  //
  // We skip the rightmost half of the array, because these nodes don't have
  // any children.
  let root = range.startIndex
  var node = root.advanced(by: C.Index.Distance(range.count.toIntMax()/2))
  while node != root {
    node._predecessorInPlace()
    _siftDown(
      &elements,
      index: node,
      subRange: range
      ${", isOrderedBefore: &isOrderedBefore" if p else ""})
  }
}
func _heapSort<
  C : MutableCollection where C.Index : RandomAccessIndex
  ${"" if p else ", C.Iterator.Element : Comparable"}
>(
  elements: inout C,
  subRange range: Range<C.Index> ${"," if p else ""}
  ${"isOrderedBefore: inout (C.Iterator.Element, C.Iterator.Element) -> Bool" if p else ""}
) {
  var hi = range.endIndex
  let lo = range.startIndex
  _heapify(
    &elements,
    subRange: range
    ${", isOrderedBefore: &isOrderedBefore" if p else ""})
  hi._predecessorInPlace()
  while hi != lo {
    swap(&elements[lo], &elements[hi])
    _siftDown(
      &elements,
      index: lo,
      subRange: lo..<hi
      ${", isOrderedBefore: &isOrderedBefore" if p else ""})
    hi._predecessorInPlace()
  }
}

% end
// for p in preds

/// Exchange the values of `a` and `b`.
///
/// - Precondition: `a` and `b` do not alias each other.
public func swap<T>(a: inout T, _ b: inout T) {
  // Semantically equivalent to (a, b) = (b, a).
  // Microoptimized to avoid retain/release traffic.
  let p1 = Builtin.addressof(&a)
  let p2 = Builtin.addressof(&b)
  _debugPrecondition(
    p1 != p2,
    "swapping a location with itself is not supported")

  // Take from P1.
  let tmp : T = Builtin.take(p1)
  // Transfer P2 into P1.
  Builtin.initialize(Builtin.take(p2) as T, p1)
  // Initialize P2.
  Builtin.initialize(tmp, p2)
}
